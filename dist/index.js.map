{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/factory.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\n\n\n// MAIN //\n\n/**\n* Evaluates the probability mass function (PMF) for a degenerate distribution centered at `mu`.\n*\n* @param {number} x - input value\n* @param {number} mu - constant value of the distribution\n* @returns {number} evaluated probability mass function\n*\n* @example\n* var y = pmf( 2.0, 3.0 );\n* // returns 0.0\n*\n* @example\n* var y = pmf( 3.0, 3.0 );\n* // returns 1.0\n*\n* @example\n* var y = pmf( NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, NaN );\n* // returns NaN\n*/\nfunction pmf( x, mu ) {\n\tif ( isnan( x ) || isnan( mu ) ) {\n\t\treturn NaN;\n\t}\n\treturn ( x === mu ) ? 1.0 : 0.0;\n}\n\n\n// EXPORTS //\n\nmodule.exports = pmf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability mass function (PMF) of a degenerate distribution centered at a provided mean value.\n*\n* @param {number} mu - value at which to center the distribution\n* @returns {Function} function to evaluate the probability mass function\n*\n* @example\n* var pmf = factory( 5.0 );\n*\n* var y = pmf( 0.0 );\n* // returns 0.0\n*\n* y = pmf( 5.0 );\n* // returns 1.0\n*/\nfunction factory( mu ) {\n\tif ( isnan( mu ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn pmf;\n\n\t/**\n\t* Evaluates the probability mass function (PMF) of a degenerate distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PMF\n\t*\n\t* @example\n\t* var y = pmf( 10.0 );\n\t* // returns <number>\n\t*/\n\tfunction pmf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn ( x === mu ) ? 1.0 : 0.0;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Degenerate distribution probability mass function (PDF).\n*\n* @module @stdlib/stats-base-dists-degenerate-pmf\n*\n* @example\n* var pmf = require( '@stdlib/stats-base-dists-degenerate-pmf' );\n*\n* var y = pmf( 2.0, 0.0 );\n* // returns 0.0\n*\n* @example\n* var factory = require( '@stdlib/stats-base-dists-degenerate-pmf' ).factory;\n*\n* var pmf = factory( 10.0 );\n*\n* var y = pmf( 10.0 );\n* // returns 1.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EA4BvD,SAASC,EAAKC,EAAGC,EAAK,CACrB,OAAKH,EAAOE,CAAE,GAAKF,EAAOG,CAAG,EACrB,IAECD,IAAMC,EAAO,EAAM,CAC7B,CAKAJ,EAAO,QAAUE,IC5DjB,IAAAG,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,iCAAkC,EAC9DC,EAAQ,QAAS,iCAAkC,EAoBvD,SAASC,EAASC,EAAK,CACtB,GAAKF,EAAOE,CAAG,EACd,OAAOH,EAAkB,GAAI,EAE9B,OAAOI,EAaP,SAASA,EAAKC,EAAI,CACjB,OAAKJ,EAAOI,CAAE,EACN,IAECA,IAAMF,EAAO,EAAM,CAC7B,CACD,CAKAJ,EAAO,QAAUG,IC7BjB,IAAII,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAU,IAKdF,EAAaC,EAAM,UAAWC,CAAQ,EAKtC,OAAO,QAAUD",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isnan", "pmf", "x", "mu", "require_factory", "__commonJSMin", "exports", "module", "constantFunction", "isnan", "factory", "mu", "pmf", "x", "setReadOnly", "main", "factory"]
}
